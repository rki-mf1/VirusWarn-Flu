/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    VOCAL-Flu Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

manifest {
    name            = 'VOCAL-Flu'
    author          = """."""
    homePage        = 'https://github.com/rki-mf1/vocal-flu'
    description     = """ A mutation-basted alert system to prioritize concerning Influenza variants from sequencing data """
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.10.1'
    version         = '1.0dev'
    doi             = ''
}

// Global default params, used in configs
params {
    cores = 4
    max_cores = 12
    memory = '12'

    help = false

    // Specify your pipeline's command line flags
    // Input options
    fasta = ''
    subtype = 'H1N1'
    psl = 'n'

    // output folder structure
    output = 'results'
    vocal_dir = '01_vocal'
    annot_dir = '02_mutations2function'
    report_dir = '03_report'
    runinfo_dir = 'X.Pipeline-Runinfo'

    // softlink results instead of copying
    publish_dir_mode = 'copy' // use 'symlink' to just link the results

    // location for engines' cache
    conda_cache_dir = 'conda'

    cloudProcess = false
}

profiles {
     // executors
    local {
        executor {
            name = "local"
            cpus = params.max_cores
            memory = params.memory
        }
        params.cloudProcess = false
        includeConfig 'conf/local.config'
    }
    slurm {
        executor {
            name = "slurm"
            queueSize = 100
            // exitReadTimeout = "360 sec"
            // submitRateLimit = '1 / 2 s'
            // pollInterval = '30 sec'
        }
        process.cache = "lenient"
        includeConfig 'conf/nodes.config'
    }

    // engines
    conda { 
        conda {
            enabled = true
            cacheDir = params.conda_cache_dir
        }
        includeConfig 'conf/conda.config'
    }
    mamba { 
        conda {
            enabled = true
            useMamba = true
            cacheDir = params.conda_cache_dir
        }
        includeConfig 'conf/conda.config'
    }

    // no config for stub runs
    stub {
        executor {
            name = "local"
            cpus = params.max_cores
        }
    }
}

// runinfo
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
  enabled = true
  file = "${params.output}/${params.runinfo_dir}/execution_timeline_${trace_timestamp}.html"
}

report {
  enabled = true
  file = "${params.output}/${params.runinfo_dir}/execution_report_${trace_timestamp}.html"
}

/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    THE END
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/